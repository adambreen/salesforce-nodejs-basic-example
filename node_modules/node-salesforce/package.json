{
  "author": {
    "name": "Shinichi Tomita",
    "email": "shinichi.tomita@gmail.com"
  },
  "name": "node-salesforce",
  "description": "Connecting Salesforce via RESTful API",
  "keywords": [
    "salesforce",
    "salesforce.com",
    "sfdc",
    "force.com",
    "database.com"
  ],
  "homepage": "http://github.com/stomita/node-salesforce",
  "version": "0.3.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/stomita/node-salesforce.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/stomita/node-salesforce/raw/master/LICENSE"
    }
  ],
  "main": "./lib/salesforce",
  "scripts": {
    "test": "vows test/*.test.js --spec"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "dependencies": {
    "async": ">= 0.1.12",
    "request": ">= 2.1.1",
    "underscore": ">= 1.2.1",
    "faye": "0.8.x"
  },
  "devDependencies": {
    "express": "2.5.x",
    "vows": "0.5.x",
    "zombie": "0.12.x"
  },
  "readme": "# node-salesforce -- Salesforce API Connection Library for Node.js Applications\n\n[![Build Status](https://secure.travis-ci.org/stomita/node-salesforce.png?branch=travis-ci)](http://travis-ci.org/stomita/node-salesforce)\n\n## Abstract\n\nNode-salesforce, which is designed to be a wrapper of Salesforce REST API in Node.js, enables Salesforce application development in event-driven style.\nIt only capsulates the access of REST API end point, so it works both on OAuth2 access token and SOAP API sessionId.\n\n## Install\n\n<pre>\n  npm install node-salesforce\n</pre>\n\nor\n\n<pre>\n  git clone git://github.com/stomita/node-salesforce.git \n  cd node-salesforce\n  npm link\n</pre>\n\n\n## Establish Connection \n\n### Using Session ID\n\n```javascript\nvar sf = require('node-salesforce');\nvar conn = new sf.Connection({\n  serverUrl : 'https://na1.salesforce.com',\n  sessionId : '<your Salesforce session ID is here>'\n});\n```\n\n### Using OAuth2 Access Token\n\n```javascript\nvar sf = require('node-salesforce');\nvar conn = new sf.Connection({\n  instanceUrl : 'https://na1.salesforce.com',\n  accessToken : '<your Salesforrce OAuth2 access token is here>'\n// refreshToken : '<your Salesforce OAuth2 refresh token is here>'\n});\n```\n\n\n### Username and Password Login (SOAP API)\n\n```javascript\nvar sf = require('node-salesforce');\nvar conn = new sf.Connection({\n  loginUrl : 'https://login.salesforce.com'\n// loginUrl : 'https://test.salesforce.com' // you can change login URL to point sandbox env.\n});\nconn.login(username, password, function(err) {\n  if (!err) {\n    // console.log(conn.accessToken);\n    // ...\n  }\n});\n```\n\n### Username and Password Login (OAuth2 Resource Owner Password Credential)\n\n```javascript\nvar sf = require('node-salesforce');\nvar conn = new sf.Connection({\n//  loginUrl : 'https://login.salesforce.com'\n  clientId : '<your Salesforce OAuth2 client ID is here>',\n  clientSecret : '<your Salesforce OAuth2 client secret is here>',\n  redirectUri : '<callback URI is here>'\n});\nconn.login(username, password, function(err) {\n  if (!err) {\n    // console.log(conn.accessToken);\n    // ...\n  }\n});\n```\n\n\n## OAuth2 Web Server Flow\n\n### Authorization Request\n\n```javascript\nvar sf = require('node-salesforce');\n\n// Following sample is using express\n// \n// get authz url and redirect to it.\napp.get('/oauth2/auth', function(req, res) {\n  var conn = new sf.Connection({\n    clientId : '<your Salesforce OAuth2 client ID is here>',\n    clientSecret : '<your Salesforce OAuth2 client secret is here>',\n    redirectUri : '<callback URI is here>'\n  });\n  res.redirect(conn.oauth2.getAuthorizationUrl({ scope : 'api id web' }));\n});\n```\n\n### Access Token Request\n\n```javascript\n// pass received authz code and get access token\napp.get('/oauth2/callback', function(req, res) {\n  var conn = new sf.Connection({\n    clientId : '<your Salesforce OAuth2 client ID is here>',\n    clientSecret : '<your Salesforce OAuth2 client secret is here>',\n    redirectUri : '<callback URI is here>'\n  });\n  var code = req.param('code');\n  conn.authorize(code, function(err) {\n    if (!err) {\n      // console.log(conn.accessToken);\n      // console.log(conn.refreshToken);\n      // ...\n    }\n  });\n});\n```\n\n\n## Query Records \n\n### In Event-Driven Style\n\n```javascript\nvar records = [];\nconn.query(\"SELECT Id, Name FROM Account\")\n  .on(\"record\", function(record) {\n    records.push(record);\n  })\n  .on(\"end\", function(query) {\n    console.log(\"total in database : \" + query.totalSize);\n    console.log(\"total fetched : \" + query.totalFetched);\n  })\n  .run({ autoFetch : true, maxFetch : 4000 });\n```\n\n### In Callback Style\n\n```javascript\nvar records = [];\nconn.query(\"SELECT Id, Name FROM Account\", function(err, result) {\n  if (!err) {\n    console.log(\"total : \" + result.totalSize);\n    console.log(\"fetched : \" + result.records.length);\n  }\n});\n```\n\n## CRUD Operation\n\n### Retrieve\n\n```javascript\nconn.sobject(\"Account\").retrieve(\"0017000000hOMChAAO\", function(err, account) {\n  if (!err) {\n    console.log(\"Name : \" + account.Name);\n  }\n});\n\n// Multiple records retrieval consumes one API request per record.\n// Be careful for the API quota.\nconn.sobject(\"Account\").retrieve([\"0017000000hOMChAAO\", \"0017000000iKOZTAA4\"], function(err, accounts) {\n  if (!err) {\n    for (var i=0; i<accounts.length; i++) {\n      console.log(\"Name : \" + accounts[i].Name);\n    }\n  }\n});\n```\n\n### Create \n\n```javascript\nconn.sobject(\"Account\").create({ Name : 'My Account #1' }, function(err, ret) {\n  if (!err && ret.success) {\n    console.log(\"Created record id : \" + ret.id);\n  }\n});\n// Multiple records creation consumes one API request per record.\n// Be careful for the API quota.\nconn.sobject(\"Account\").create([{\n  Name : 'My Account #1'\n}, {\n  Name : 'My Account #2'\n}], \nfunction(err, rets) {\n  if (!err) {\n    for (var i=0; i<rets.length; i++) {\n      if (rets[i].success) {\n        console.log(\"Created record id : \" + rets[i].id);\n      }\n    }\n  }\n});\n```\n\n### Update\n\n```javascript\nconn.sobject(\"Account\").update({ \n  Id : '0017000000hOMChAAO',\n  Name : 'Updated Account #1'\n}, function(err, ret) {\n  if (!err && ret.success) {\n    console.log('Updated Successfully : ' + ret.id);\n  }\n});\n\n// Multiple records modification consumes one API request per record.\n// Be careful for the API quota.\nconn.sobject(\"Account\").update([{\n  Id : '0017000000hOMChAAO',\n  Name : 'Updated Account #1'\n}, {\n  Id : '0017000000iKOZTAA4',\n  Name : 'Updated Account #2'\n}], \nfunction(err, rets) {\n  if (!err) {\n    for (var i=0; i<rets.length; i++) {\n      if (rets[i].success) {\n        console.log(\"Updated Successfully : \" + rets[i].id);\n      }\n    }\n  }\n});\n```\n\n### Delete\n\n```javascript\nconn.sobject(\"Account\").del('0017000000hOMChAAO', function(err, ret) {\n  if (!err && ret.success) {\n    console.log('Deleted Successfully : ' + ret.id);\n  }\n});\n\n// Multiple records deletion consumes one API request per record.\n// Be careful for the API quota.\nconn.sobject(\"Account\").destroy([ // synonym of \"del\"\n  '0017000000hOMChAAO',\n  '0017000000iKOZTAA4'\n}], \nfunction(err, rets) {\n  if (!err) {\n    for (var i=0; i<rets.length; i++) {\n      if (rets[i].success) {\n        console.log(\"Deleted Successfully : \" + rets[i].id);\n      }\n    }\n  }\n});\n```\n\n\n### Upsert\n\n```javascript\nconn.sobject(\"UpsertTable__c\").upsert({ \n  Name : 'Record #1',\n  ExtId__c : 'ID-0000001'\n}, 'ExtId__c', function(err, ret) {\n  if (!err && ret.success) {\n    console.log('Upserted Successfully');\n  }\n});\n// Multiple records modification consumes one API request per record.\n// Be careful for the API quota.\nconn.sobject(\"UpsertTable__c\").upsert([{\n  Name : 'Record #1',\n  ExtId__c : 'ID-0000001'\n}, {\n  Name : 'Record #2',\n  ExtId__c : 'ID-0000002'\n}], \n'ExtId__c',\nfunction(err, rets) {\n  if (!err) {\n    for (var i=0; i<rets.length; i++) {\n      if (rets[i].success) {\n        console.log(\"Upserted Successfully\");\n      }\n    }\n  }\n});\n```\n\n\n## Describe\n\n### SObject\n\n```javascript\nconn.sobject(\"Account\").describe(function(err, meta) {\n  if (!err) {\n    console.log('Label : ' + meta.label);\n    console.log('Num of Fields : ' + meta.fields.length);\n  }\n});\n```\n\n### Global Object\n\n```javascript\nconn.describeGlobal(function(err, res) {\n  if (!err) {\n    console.log('Num of SObjects : ' + res.sobjects.length);\n  }\n});\n```\n\n## Streaming\n\n```javascript\n/**\n Before the subscription, you should insert appropriate PushTopic record (in this example, \"InvoiceStatementUpdates\") as written in Streaming API guide.\n */\nconn.topic(\"InvoiceStatementUpdates\").subscribe(function(message) {\n  console.log('Event Type : ' + message.event.type);\n  console.log('Event Created : ' + message.event.createdDate);\n  console.log('Object Id : ' + message.sobject.Id);\n});\n```\n\n\n\n\n",
  "_id": "node-salesforce@0.3.1",
  "_from": "node-salesforce@*"
}
